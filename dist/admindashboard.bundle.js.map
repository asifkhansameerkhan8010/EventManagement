{"version":3,"file":"admindashboard.bundle.js","mappings":";;;;;;;;;AAAa;AACb,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,cAAc;AACpC,sBAAsB,WAAW;AACjC,sBAAsB,oBAAoB;AAC1C;AACA,8DAA8D,WAAW;AACzE,gEAAgE,WAAW;AAC3E;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,0FAA0F,MAAM,+BAA+B,MAAM,+BAA+B,MAAM;AAC1K;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,kBAAkB;AAClB,kBAAkB;AAClB,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,6DAA6D,0BAA0B;AACvF;AACA;AACA;AACA,2BAA2B,yBAAyB;AACpD;AACA;AACA,kCAAkC,yBAAyB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,cAAc;AACtD,wCAAwC,kBAAkB;AAC1D,gDAAgD,kBAAkB;AAClE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack:///./admindashboard/admin-dashboard.ts"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst userListBody = document.getElementById('user-list-body');\nconst addUserForm = document.getElementById('add-user-form');\nconst submitButton = document.querySelector('.submit-button');\nconst signupError = document.getElementById('signup-error');\nconst backupButton = document.getElementById('backup-button');\nconst restoreButton = document.getElementById('restore-button');\nconst backupHistoryContainer = document.getElementById('backup-history');\nconst addUserButton = document.getElementById('adduser');\nconst formContainer = document.querySelector('.form-container');\nconst viewBackupHistoryButton = document.getElementById('view-backup-history-button');\nlet editingEmail = null;\nfunction displayUsers() {\n    if (!userListBody)\n        return;\n    userListBody.innerHTML = '';\n    const userKeys = Object.keys(localStorage).filter(key => key.includes('@') && !key.includes('events') && !key.includes('guests') && key !== 'loggedInUser');\n    userKeys.forEach(key => {\n        const userData = localStorage.getItem(key);\n        if (userData) {\n            const user = JSON.parse(userData);\n            if (user.role === 'admin' && (!user.username || user.username.trim() === '')) {\n                user.username = 'admin';\n            }\n            const row = document.createElement('tr');\n            row.innerHTML = `\r\n                <td>${user.username}</td>\r\n                <td>${user.email}</td>\r\n                <td>${user.role || 'user'}</td>\r\n                <td>\r\n                    <button class=\"edit-button\" data-email=\"${user.email}\">Edit</button>\r\n                    <button class=\"delete-button\" data-email=\"${user.email}\">Delete</button>\r\n                </td>\r\n            `;\n            userListBody.appendChild(row);\n        }\n    });\n}\ndisplayUsers();\nuserListBody.addEventListener('click', function (event) {\n    const target = event.target;\n    const email = target.getAttribute('data-email');\n    if (email) {\n        if (target.classList.contains('edit-button')) {\n            editUser(email);\n        }\n        else if (target.classList.contains('delete-button') && confirm('Are you sure you want to delete this user?')) {\n            deleteUser(email);\n        }\n    }\n});\nfunction editUser(email) {\n    const userData = localStorage.getItem(email);\n    if (userData) {\n        const user = JSON.parse(userData);\n        const usernameInput = document.getElementById('username');\n        const emailInput = document.getElementById('email');\n        const passwordInput = document.getElementById('password');\n        const confirmPasswordInput = document.getElementById('confirm-password');\n        const roleSelect = document.getElementById('role');\n        if (usernameInput && emailInput && passwordInput && confirmPasswordInput && roleSelect) {\n            usernameInput.value = user.username;\n            emailInput.value = user.email;\n            passwordInput.value = user.password;\n            confirmPasswordInput.value = user.password;\n            roleSelect.value = user.role || 'user';\n            editingEmail = email;\n            submitButton.textContent = 'Update User';\n            formContainer.style.display = 'block';\n        }\n        else {\n            console.error('One or more form elements are missing.');\n        }\n    }\n}\nfunction deleteUser(email) {\n    const userData = localStorage.getItem(email);\n    if (userData) {\n        const user = JSON.parse(userData);\n        if (user.role === 'admin') {\n            alert('Cannot delete admin user.');\n            return;\n        }\n    }\n    localStorage.removeItem(email);\n    deleteUserRelatedData(email);\n    displayUsers();\n}\naddUserButton.addEventListener('click', () => {\n    formContainer.style.display = 'block';\n});\naddUserForm.addEventListener('submit', function (event) {\n    event.preventDefault();\n    const username = document.getElementById('username').value;\n    const email = document.getElementById('email').value;\n    const password = document.getElementById('password').value;\n    const confirmPassword = document.getElementById('confirm-password').value;\n    const role = document.getElementById('role').value;\n    if (password !== confirmPassword) {\n        signupError.textContent = 'Passwords do not match!';\n        return;\n    }\n    if (editingEmail) {\n        if (localStorage.getItem(email) && email !== editingEmail) {\n            signupError.textContent = 'An account with this email already exists!';\n            return;\n        }\n        localStorage.removeItem(editingEmail);\n    }\n    else if (localStorage.getItem(email)) {\n        signupError.textContent = 'An account with this email already exists!';\n        return;\n    }\n    const user = { username, email, password, role };\n    localStorage.setItem(email, JSON.stringify(user));\n    signupError.textContent = '';\n    addUserForm.reset();\n    displayUsers();\n    formContainer.style.display = 'none';\n    submitButton.textContent = 'Add User';\n    editingEmail = null;\n});\nfunction deleteUserRelatedData(email) {\n    const keysToDelete = Object.keys(localStorage).filter(key => key.startsWith(`events_${email}`) || key.startsWith(`guests_${email}`) || key.startsWith(`agenda_${email}`));\n    keysToDelete.forEach(key => localStorage.removeItem(key));\n}\nfunction getCategories() {\n    const categoriesData = localStorage.getItem('categories');\n    return categoriesData ? JSON.parse(categoriesData) : [];\n}\nfunction getLoggedInUserName() {\n    const loggedInUserEmail = localStorage.getItem('loggedInUser');\n    if (loggedInUserEmail) {\n        const userData = localStorage.getItem(loggedInUserEmail);\n        if (userData) {\n            const user = JSON.parse(userData);\n            return user.username || 'admin';\n        }\n    }\n    return 'admin';\n}\nfunction backupData() {\n    const userName = getLoggedInUserName();\n    const data = {\n        users: {},\n        events: {},\n        guests: {},\n        agendas: {},\n        categories: getCategories()\n    };\n    Object.keys(localStorage).forEach(key => {\n        const value = localStorage.getItem(key);\n        if (value) {\n            if (key.includes('@')) {\n                data.users[key] = JSON.parse(value);\n            }\n            else if (key.startsWith('events_')) {\n                data.events[key] = JSON.parse(value);\n            }\n            else if (key.startsWith('guests_')) {\n                data.guests[key] = JSON.parse(value);\n            }\n            else if (key.startsWith('agenda_')) {\n                data.agendas[key] = JSON.parse(value);\n            }\n        }\n    });\n    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = `backup_${new Date().toISOString()}.json`;\n    a.click();\n    URL.revokeObjectURL(url);\n    updateBackupHistory(`backup_${new Date().toISOString()}.json`, userName);\n}\nbackupButton.addEventListener('click', backupData);\nfunction displayBackupHistory() {\n    const backupHistory = JSON.parse(localStorage.getItem('backupHistory') || '[]');\n    backupHistoryContainer.innerHTML = '';\n    backupHistory.forEach(metadata => {\n        const item = document.createElement('div');\n        item.innerHTML = `\r\n            <p><strong>Date:</strong> ${metadata.date}</p>\r\n            <p><strong>File:</strong> ${metadata.fileName}</p>\r\n            <p><strong>Backed up by:</strong> ${metadata.userName}</p> \r\n        `;\n        backupHistoryContainer.appendChild(item);\n    });\n}\nfunction addBackupMetadata(fileName, userName) {\n    const backupHistory = JSON.parse(localStorage.getItem('backupHistory') || '[]');\n    backupHistory.push({\n        date: new Date().toLocaleString(),\n        fileName,\n        userName\n    });\n    localStorage.setItem('backupHistory', JSON.stringify(backupHistory));\n}\nfunction updateBackupHistory(fileName, userName) {\n    addBackupMetadata(fileName, userName);\n    displayBackupHistory();\n}\nrestoreButton.addEventListener('click', function () {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'application/json';\n    input.addEventListener('change', function (event) {\n        var _a;\n        const file = (_a = event.target.files) === null || _a === void 0 ? void 0 : _a[0];\n        if (file) {\n            const reader = new FileReader();\n            reader.onload = function (e) {\n                var _a;\n                const result = (_a = e.target) === null || _a === void 0 ? void 0 : _a.result;\n                const data = JSON.parse(result);\n                Object.keys(localStorage).forEach(key => localStorage.removeItem(key));\n                Object.keys(data.users).forEach(key => localStorage.setItem(key, JSON.stringify(data.users[key])));\n                Object.keys(data.events).forEach(key => localStorage.setItem(key, JSON.stringify(data.events[key])));\n                Object.keys(data.guests).forEach(key => localStorage.setItem(key, JSON.stringify(data.guests[key])));\n                Object.keys(data.agendas).forEach(key => localStorage.setItem(key, JSON.stringify(data.agendas[key])));\n                localStorage.setItem('categories', JSON.stringify(data.categories));\n                displayUsers();\n                displayBackupHistory();\n            };\n            reader.readAsText(file);\n        }\n    });\n    input.click();\n});\n// Toggle backup history visibility\nfunction toggleBackupHistoryVisibility() {\n    const isVisible = backupHistoryContainer.style.display === 'block';\n    backupHistoryContainer.style.display = isVisible ? 'none' : 'block';\n}\n// Add event listener for the \"View Backup History\" button\nviewBackupHistoryButton.addEventListener('click', toggleBackupHistoryVisibility);\n// Add event listener for clicks outside of the backup history container\ndocument.addEventListener('click', function (event) {\n    const target = event.target;\n    if (!backupHistoryContainer.contains(target) && !viewBackupHistoryButton.contains(target)) {\n        backupHistoryContainer.style.display = 'none';\n    }\n});\n"],"names":[],"sourceRoot":""}