{"version":3,"file":"addevent.bundle.js","mappings":";;;;;;;;;AAAa;AACb;AACA,8CAA6C,EAAE,aAAa,EAAC;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC","sources":["webpack:///./addevent/addevent.ts"],"sourcesContent":["\"use strict\";\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst loggedInUser = localStorage.getItem('loggedInUser');\nif (!loggedInUser) {\n    alert('You must be logged in to add or edit events.');\n    window.location.href = 'index.html';\n}\n// events for logged-in user or initialize an empty array\nconst userEventsKey = `events_${loggedInUser}`;\nlet userEvents = JSON.parse(localStorage.getItem(userEventsKey) || '[]');\nfunction populateEventCategories() {\n    const categorySelect = document.getElementById('event-category');\n    if (categorySelect) {\n        categorySelect.innerHTML = '';\n        // Retrieve categories from ls\n        const categories = JSON.parse(localStorage.getItem('categories_list') || '[]');\n        // category select element\n        categories.forEach(categoryObj => {\n            const option = document.createElement('option');\n            option.value = categoryObj.name.toLowerCase();\n            option.textContent = categoryObj.name;\n            categorySelect.appendChild(option);\n        });\n    }\n}\n// to populate cate\npopulateEventCategories();\nfunction populateForm(eventId) {\n    const event = userEvents.find(event => event.id === eventId);\n    if (event) {\n        const nameInput = document.getElementById('event-name');\n        const dateInput = document.getElementById('event-date');\n        const locationInput = document.getElementById('location');\n        const descriptionInput = document.getElementById('event-description');\n        const statusInput = document.getElementById('event-status');\n        const categoryInput = document.getElementById('event-category');\n        const submitButton = document.querySelector('button[type=\"submit\"]');\n        if (nameInput)\n            nameInput.value = event.name || '';\n        if (dateInput)\n            dateInput.value = event.date || '';\n        if (locationInput)\n            locationInput.value = event.location || '';\n        if (descriptionInput)\n            descriptionInput.value = event.description || '';\n        if (statusInput)\n            statusInput.value = event.status || '';\n        if (categoryInput)\n            categoryInput.value = event.category || '';\n        if (submitButton)\n            submitButton.innerText = 'Update Event';\n    }\n    else {\n        console.error('Event not found');\n    }\n}\n// Check for editing an event\nconst urlParams = new URLSearchParams(window.location.search);\nconst eventId = parseInt(urlParams.get('eventId') || '', 10);\nconsole.log(eventId);\nif (eventId) {\n    populateForm(eventId);\n}\n(_a = document.querySelector('form')) === null || _a === void 0 ? void 0 : _a.addEventListener('submit', function (event) {\n    event.preventDefault();\n    const eventName = document.getElementById('event-name').value;\n    const eventDate = document.getElementById('event-date').value;\n    const location = document.getElementById('location').value;\n    const description = document.getElementById('event-description').value;\n    const status = document.getElementById('event-status').value;\n    const category = document.getElementById('event-category').value;\n    // Create a new event object or update the existing one\n    const newEvent = {\n        id: eventId || Date.now(), // Uses existing ID if editing, else generate new\n        name: eventName,\n        date: eventDate,\n        location: location,\n        description: description,\n        status: status,\n        category: category,\n        guests: []\n    };\n    if (eventId) {\n        const index = userEvents.findIndex(event => event.id === eventId);\n        if (index !== -1) {\n            userEvents[index] = newEvent;\n        }\n    }\n    else {\n        userEvents.push(newEvent);\n    }\n    // Save the updated events array back to the ls\n    localStorage.setItem(userEventsKey, JSON.stringify(userEvents));\n    this.reset();\n    alert('Event saved successfully!');\n    window.location.href = 'dashboard.html';\n});\n"],"names":[],"sourceRoot":""}